---
- include_vars: "{{ item }}"
  with_first_found:
    - "../vars/{{ ansible_os_family }}.yml"
    - "../vars/Debian.yml"
  when: install_db_packages is not defined or postgresql_conf is not defined
- name: install postgresql
  package: name={{ item }} state=latest
  with_items: "{{ install_db_packages }}"
  register: postgres_installed
- name: init postgresql
  command: /usr/bin/postgresql-setup --initdb --unit postgresql
  when: ansible_os_family == "RedHat" and postgres_installed.changed
- name: copy postgresql.conf
  template: src=postgresql.j2 dest={{ postgresql_conf }}/postgresql.conf
  register: postgresql_conf_task
- name: copy pg_hba.conf
  template: src=pg_hba.j2 dest={{ postgresql_conf }}/pg_hba.conf
  register: postgresql_hba_task
- name: pg enable
  service: name=postgresql enabled=yes
- name: pg restart
  service: name=postgresql state=restarted
  when: postgresql_conf_task.changed or postgresql_hba_task.changed
- name: create db
  become: yes
  become_user: postgres
  postgresql_db: name={{ psql_db_name }}
- name: create user
  become: yes
  become_user: postgres
  postgresql_user: db={{ psql_db_name }} name={{ project_user }} password={{ project_password }} priv=ALL
- name: ensure user does not have unnecessary privilege
  become: yes
  become_user: postgres
  postgresql_user: name={{ project_user }} role_attr_flags=NOSUPERUSER,NOCREATEDB
